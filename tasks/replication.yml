---
- name: Ensure replication user exists on master.
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
  no_log: "{{ mysql_hide_passwords }}"
  when:
    - mysql_replication_role == 'master'
    - mysql_replication_user.name is defined
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: Create temporary backup directory on master
  tempfile:
    state: directory
    prefix: ansible-
    suffix: .mysqlslave
  register: backupdir
  when: mysql_replication_role == 'master'

- name: Dump database from master
  command: >-
    mysqldump --master-data=2 --single-transaction --all-databases {{ backupdir.path }}/dump.sql
  register: mysqldump
  when: mysql_replication_role == 'master'
  failed_when: '"Dump completed on" not in mysqldump'

- name: Compress database dump
  archive:
    path: "{{ backupdir.path }}/dump.sql"
    dest: "{{ backupdir.path }}/dump.gz"
    format: gz
    owner: root
    group: root
    mode: 0600
    remove: true

- name: Transfer dump file to slave
  synchronize:
    src: "{{ hostvars[master].backupdir.path }}/dump.gz"
    dest: /var/lib/mysql
  delegate_to: "{{ master }}"
  when: mysql_replication_role == 'slave'

- name: Uncompress database dump
  unarchive:
    src: /var/lib/mysql/dump.gz
    dest: /var/lib/mysql
    owner: mysql
    group: mysql
  when: mysql_replication_role == 'slave'

- name: Import dump on slave
  command: >-
    mysql < /var/lib/mysql/dump.sql
  when: mysql_replication_role == 'slave'

- name: Check slave replication status.
  mysql_replication:
    mode: getreplica
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
  no_log: "{{ mysql_hide_passwords }}"
  ignore_errors: true
  register: slave
  when:
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

# https://github.com/ansible/ansible/issues/82264
- name: Check master replication status.
  mysql_replication:
    mode: getprimary
  delegate_to: "{{ mysql_replication_master_inventory_host | default(omit, true) }}"
  register: master
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Replica is defined and not slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: Configure replication on the slave.
  mysql_replication:
    mode: changeprimary
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  no_log: "{{ mysql_hide_passwords }}"
  ignore_errors: true
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Replica is defined and not slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - mysql_replication_user.name is defined
    - (mysql_replication_master | length) > 0

- name: Start replication.
  mysql_replication:
    mode: startreplica
  when:
    - (slave.Is_Slave is defined and slave.Is_Slave) or (slave.Is_Replica is defined and slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']
