---
- name: Restore the dump to the slave
    shell: |
      mysql --user=root --password={{ mysql_root_password }} < {{ master_dump_file }}
    args:
      executable: /bin/bash

- name: Check slave replication status.
  mysql_replication:
    mode: getreplica
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
  no_log: "{{ mysql_hide_passwords }}"
  ignore_errors: true
  register: slave
  when:
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: Configure replication on the slave.
  mysql_replication:
    mode: changeprimary
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ mysql_binlog_file }}"
    master_log_pos: "{{ mysql_binlog_position }}"
  no_log: "{{ mysql_hide_passwords }}"
  ignore_errors: true
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Replica is defined and not slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - mysql_replication_user.name is defined
    - (mysql_replication_master | length) > 0

- name: Start replication.
  mysql_replication:
    mode: startreplica
  when:
    - (slave.Is_Slave is defined and slave.Is_Slave) or (slave.Is_Replica is defined and slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']
